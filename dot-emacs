;;; dot-emacs ---- Emacs configuration
;;;
;;; Commentary:
;;;
;;; Configuration for Emacs 24
;;;
;;; Code:
;;;
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/autocomplete")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar package-list)
(setq package-list '(magit smex flycheck undo-tree))

(require 'package)
(add-to-list 'package-archives
	     '("melpa-stable" . "http://stable.melpa.org/packages/") t)

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Visual customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; skip welcome screen
(setq inhibit-startup-screen t)

; no message in scratch buffer
(setq initial-scratch-message "")

; syntax highlightning on by default
(setq-default global-font-lock-mode t)

; show column numbers
(setq-default column-number-mode t)

; show current line
(setq-default line-number-mode t)

; display buffer size in modeline
(size-indication-mode t)

; automatic wrap to 80 columns (TODO)
(setq-default fill-column 80)
; (setq auto-fill-mode t)

; show matching parenthesis
(show-paren-mode t)

; disable the menubar (promotes good emacs memory :)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tool-bar-mode 0)

; blinking top and bottom lines instead of speaker buzz
(setq-default visible-bell t)

; always show trailing whitespace
(setq-default show-trailing-whitespace t)

; paint CSS colors
(defvar hexcolour-keywords
  '(("#[abcdef[:digit:]]\\{6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))
(defun hexcolour-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolour-keywords))

(add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)

; required for non-English keys (like dead acute) to work
; http://osdir.com/ml/help-gnu-emacs-gnu/2009-05/msg00170.html
(require 'iso-transl)

; better diff coloring
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

; display time at status bar
(setq-default display-time-24hr-format t)
(display-time)

; move the mouse away from the cursor
(mouse-avoidance-mode 'animate)

; freedesktop standard fullscreen
(defun fullscreen ()
  (interactive)
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                         '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
(global-set-key [f11] 'fullscreen)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Behavior
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; backup files are for sissies
(setq-default make-backup-files nil)

; always indent with spaces
(setq-default indent-tabs-mode nil)
(setq-default default-tab-width 4)

; save files to home directory by default
(setq-default default-directory '~)

; move between windows with SHIFT+arrows
(windmove-default-keybindings)

; replace yes/no questions with y/n
(fset 'yes-or-no-p 'y-or-n-p)

; (much) bigger kill ring
(setq-default kill-ring-max 1000)

; start server for emacsclient
(server-start)

; enable set goal column (C-x C-n)
(put 'set-goal-column 'disabled nil)

; mondays are the first day of the week (for M-x calendar)
(setq-default calendar-week-start-day 1)

;; keep session between emacs runs (~/.emacs.desktop)
(defvar desktop-save)
(setq desktop-save 'if-exists)
(desktop-save-mode 1)
(defvar desktop-globals-to-save)
(setq desktop-globals-to-save
      (append '((extended-command-history . 50)
                (file-name-history        . 200)
                (grep-history             . 50)
                (compile-history          . 50)
                (minibuffer-history       . 100)
                (query-replace-history    . 100)
                (read-expression-history  . 100)
                (regexp-history           . 100)
                (regexp-search-ring       . 100)
                (search-ring              . 50)
                (shell-command-history    . 50)
                tags-file-name
                register-alist)))

; use ssh, not rsh
(setq-default remote-shell-program "ssh")

; ease operations between two direds side by side
(setq-default dired-dwim-target t)

; use undo-tree for better undo
(global-undo-tree-mode)

; browse the kill ring (binded to "C-c k" below)
;(require 'browse-kill-ring)

; integrate copy/paste with X
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

; enable disabled commands, I'm a big guy
(put 'narrow-to-region 'disabled nil)
(put 'not-modified 'disabled t)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

; make scripts (files that start with #!) executable after saving
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

; make dead keys work on graphic environments
(load-library "iso-transl")

; Display flymake errors on the minibuffer after half a second
(custom-set-variables
 '(help-at-pt-timer-delay 0.5)
 '(help-at-pt-display-when-idle '(flycheck-overlay)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Keybindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "M--") 'dabbrev-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x M-v") 'svn-status)
(global-set-key (kbd "M-g") 'goto-line)

; font size
(define-key global-map (kbd "C-M-+") 'text-scale-increase)
(define-key global-map (kbd "C-M--") 'text-scale-decrease)

; generic apropos (of any symbol) better than apropos-command
(global-set-key "\C-ha" 'apropos)

; I hate minimize
(global-set-key "\C-z" 'ignore)
(global-set-key "\C-x\C-z" 'ignore)

; quicker window splitting
(global-set-key (kbd "M-1") 'delete-other-windows) ; was digit-argument
(global-set-key (kbd "M-2") 'split-window-vertically) ; was digit-argument
(global-set-key (kbd "M-3") 'split-window-horizontally) ; was digit-argument
(global-set-key (kbd "M-0") 'delete-window) ; was digit-argument
(global-set-key (kbd "M-s") 'other-window) ; was center-line

; zap-back-to-char
(global-set-key "\C-\M-z" #'(lambda (arg char)
                              (interactive "p\ncBack-zap to char: ")
                              (zap-to-char (- arg) char)))

; browse kill ring is awesome
(global-set-key (kbd "C-c k") 'browse-kill-ring)
(global-set-key (kbd "C-c C-k") 'browse-kill-ring)

; region commenting
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org-mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)
(defvar org-disputed-keys)
(defvar org-replace-disputed-keys)
(setq org-disputed-keys (quote (([(shift up)] . [(meta shift up)])
                                ([(shift down)] . [(meta shift down)])
                                ([(shift left)] . [(meta shift left)])
                                ([(shift right)] . [(meta shift right)])
                                ([(control shift right)] . [(control meta shift right)])
                                ([(control shift left)] . [(control meta shift left)])))
      org-replace-disputed-keys t)

(defvar org-directory)
(setq org-directory "~/Docs/Org")
(defvar org-default-notes-file)
(setq org-default-notes-file (concat org-directory "/notes.org"))

; record date and time when a task is marked as DONE
(defvar org-log-done)
(setq org-log-done t)

; detect idle time when clock is running
(defvar org-clock-idle-time)
(setq org-clock-idle-time 10)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ido (Interactively Do Things)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'ido)
(ido-mode t)

; allow fuzzy searching for consecutive characters when there are no results
(setq ido-enable-flex-matching t)

; take filename from cursor if exists
(setq-default ido-use-filename-at-point 'guess)
(setq-default ido-use-url-at-point 'guess)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; smex (Ido-like M-x enhancement)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Uniquify (smart buffer renaming)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "/")
; rename after killing uniquified
(setq uniquify-after-kill-buffer-p t)
; don't mess with special buffers
(setq uniquify-ignore-buffers-re "^\\*")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dired-x (extras for dired mode)
;; http://www.gnu.org/software/emacs/manual/html_mono/dired-x.html
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            ;; Set dired-x global variables here.
            ))
(add-hook 'dired-mode-hook
          (lambda ()
            ;; Set dired-x buffer-local variables here.
            (dired-omit-mode t)
            ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit (Git frontend)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "C-x C-g") 'magit-status)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Python environment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(load-file "~/.emacs.d/emacs-for-python/epy-init.el")

(global-flycheck-mode)

; load django snippets
;(epy-django-snippets)

; disable highlightning current line
(global-hl-line-mode 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XML mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; for xml files, use nxml-mode instead of old sgml-mode
(add-to-list 'auto-mode-alist '("\\.xml\\'" . nxml-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Rope & Ropemacs (Python refactoring)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Initialize Pymacs
;(autoload 'pymacs-apply "pymacs")
;(autoload 'pymacs-call "pymacs")
;(autoload 'pymacs-eval "pymacs" nil t)
;(autoload 'pymacs-exec "pymacs" nil t)
;(autoload 'pymacs-load "pymacs" nil t)

;; Initialize Rope
;(pymacs-load "ropemacs" "rope-")
;(setq ropemacs-enable-autoimport t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Django HTML mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'django-html-mode)

; associate by default with .html files
(add-to-list 'auto-mode-alist '("\\.html$'" . django-html-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SGML mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq sgml-validate-command '"nsgmls -s -c /usr/share/sgml/xml.soc")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Autocomplete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(require 'auto-complete)
;(require 'auto-complete-css)
;(require 'auto-complete-python)
;(require 'auto-complete-yasnippet)
;(global-auto-complete-mode t)
;(define-key ac-complete-mode-map "\t" 'ac-complete)
;(define-key ac-complete-mode-map "\r" nil)
;(add-hook 'python-mode-hook
;          (lambda ()
;            (setq ac-sources '(ac-source-ropemacs ac-source-yasnippet))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PHP xdebug support
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/geben-0.24")
(autoload 'geben "geben" "PHP Debugger on Emacs" t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ReST mode (rst-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; associate with .rst and .rest extensions
(setq auto-mode-alist
      (append '(("\\.rst$" . rst-mode)
                ("\\.rest$" . rst-mode)) auto-mode-alist))

; auto-update the TOC after adjusting a section title
(add-hook 'rst-adjust-hook 'rst-toc-update)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ERC (IRC client)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq-default erc-modules
              '(autoaway autojoin button completion fill irccontrols list match
                menu move-to-prompt netsplit networks noncommands readonly ring
                scrolltobottom services stamp spelling track truncate))
(setq-default erc-nick-uniquifier "_")
(setq-default erc-server "irc.freenode.net")
(setq-default erc-port 6667)
(setq-default erc-prompt-for-password nil)
(setq-default erc-public-away-p t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; user preferences
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; set user preferences at the end to redefine defaults
(setq user-mail-address "lorenzo.gil.sanchez@gmail.com")
(setq user-full-name "Lorenzo Gil")

(load-theme 'wombat t)

(provide 'dot-emacs)
;;; dot-emacs ends here
