(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'load-path "~/.emacs.d/autocomplete")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Visual customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; color theme
(require 'color-theme)
(color-theme-initialize)

; skip welcome screen
(setq inhibit-startup-screen t)

; syntax highlightning on by default
(setq-default global-font-lock-mode t)

; show column numbers
(setq-default column-number-mode t)

; show current line
(setq-default line-number-mode t)

; automatic wrap to 80 columns (TODO)
(setq-default fill-column 80)
; (setq auto-fill-mode t)

; show selection
(setq-default transient-mark-mode t)

; show matching parenthesis
(show-paren-mode t)

; disable the menubar (promotes good emacs memory :)
(menu-bar-mode nil)
(scroll-bar-mode nil)
(tool-bar-mode nil)

; blinking top and bottom lines instead of speaker buzz
(setq-default visible-bell t)

; always show trailing whitespace
(setq-default show-trailing-whitespace t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Behavior
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; backup files are for sissies
(setq-default make-backup-files nil)

; always indent with spaces
(setq-default indent-tabs-mode nil)
(setq-default default-tab-width 4)

; save files to home directory by default
(setq-default default-directory '~)

; move between windows with SHIFT+arrows
(windmove-default-keybindings)

; replace yes/no questions with y/n
(fset 'yes-or-no-p 'y-or-n-p)

; (much) bigger kill ring
(setq-default kill-ring-max 1000)

; enable set goal column (C-x C-n)
(put 'set-goal-column 'disabled nil)

; start server for emacsclient
(server-start)

;; keep session between emacs runs (~/.emacs.desktop)
(setq desktop-save 'if-exists)
(desktop-save-mode 1)
(setq desktop-globals-to-save
      (append '((extended-command-history . 50)
                (file-name-history        . 200)
                (grep-history             . 50)
                (compile-history          . 50)
                (minibuffer-history       . 100)
                (query-replace-history    . 100)
                (read-expression-history  . 100)
                (regexp-history           . 100)
                (regexp-search-ring       . 100)
                (search-ring              . 50)
                (shell-command-history    . 50)
                tags-file-name
                register-alist)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Keybindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "M--") 'dabbrev-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x M-v") 'svn-status)

; font size
(define-key global-map (kbd "C-M-+") 'text-scale-increase)
(define-key global-map (kbd "C-M--") 'text-scale-decrease)

; generic apropos (of any symbol) better than apropos-command
(global-set-key "\C-ha" 'apropos)

; I hate minimize
(global-set-key "\C-z" 'ignore)
(global-set-key "\C-x\C-z" 'ignore)

; zap-back-to-char
(global-set-key "\C-\M-z" #'(lambda (arg char)
                              (interactive "p\ncBack-zap to char: ")
                              (zap-to-char (- arg) char)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ido (Interactively Do Things)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'ido)
(ido-mode t)

; allow fuzzy searching for consecutive characters when there are no results
(setq ido-enable-flex-matching t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Uniquify (smart buffer renaming)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "/")
; rename after killing uniquified
(setq uniquify-after-kill-buffer-p t)
; don't mess with special buffers
(setq uniquify-ignore-buffers-re "^\\*")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dired-x (extras por dired mode)
;; http://www.gnu.org/software/emacs/manual/html_mono/dired-x.html
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            ;; Set dired-x global variables here.
            ))
(add-hook 'dired-mode-hook
          (lambda ()
            ;; Set dired-x buffer-local variables here.
            (dired-omit-mode t)
            ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Yasnippet (template system)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippets/")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Subversion mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; psvn is included in Emacs but it's not activated by default
(require 'psvn)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flymake & pyflakes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; you need pyflakes in your path to make this work
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
		       'flymake-create-temp-inplace))
	   (local-file (file-relative-name
			temp-file
			(file-name-directory buffer-file-name))))
      (list "pyflakes" (list local-file))))

  (add-to-list 'flymake-allowed-file-name-masks
	       '("\\.py\\'" flymake-pyflakes-init)))

(add-hook 'find-file-hook 'flymake-find-file-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Rope & Ropemacs (Python refactoring)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)

(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Django HTML mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'django-html-mode)

; associate by default with .html files
(add-to-list 'auto-mode-alist '("\\.html$'" . django-html-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ReST mode (rst-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; associate with .rst and .rest extensions

(setq auto-mode-alist
      (append '(("\\.rst$" . rst-mode)
                ("\\.rest$" . rst-mode)) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; EMMS (Emacs MultiMedia System)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; (add-to-list 'load-path "~/emms/") ; if not installed via APT
(require 'emms-setup)
(emms-standard)
(emms-default-players)

; show song name when changing tracks
(add-hook 'emms-player-started-hook 'emms-show)

; libtag support
(require 'emms-info-libtag)
(setq emms-info-functions '(emms-info-libtag))

; allow seeking
(require 'emms-player-mpg321-remote)
(push 'emms-player-mpg321-remote emms-player-list)
(push 'emms-player-mplayer emms-player-list)
(push 'emms-player-mplayer-playlist emms-player-list)

; default directory
(setq emms-source-file-default-directory "~/music/")

; ALSA output
(setq emms-player-mpg321-parameters '("-o" "alsa"))

(require 'emms-get-lyrics)

; Look for lyrics on Google
(defun emms-google-for-lyrics ()
  (interactive)
  (browse-url
   (concat "http://www.google.com/search?q="
           (replace-regexp-in-string " +" "+"
                                     (concat "lyrics "
                                             (delete ?- (emms-track-description
                             (emms-playlist-current-selected-track))))))))

; standard ZXCVB shortcuts (well, almost)
(global-set-key (kbd "s-z") 'emms-previous)
(global-set-key (kbd "s-x") 'emms-pause)
(global-set-key (kbd "s-c") 'emms-show)
(global-set-key (kbd "s-v") 'emms-stop)
(global-set-key (kbd "s-b") 'emms-next)
; seeking
(global-set-key (kbd "s-<kp-right>") 'emms-seek-forward)
(global-set-key (kbd "s-<kp-left>") 'emms-seek-backward)
(global-set-key (kbd "s-<right>") 'emms-seek-forward) ; arrows in my laptop
(global-set-key (kbd "s-<left>") 'emms-seek-backward) ; arrows in my laptop
; playlist
(global-set-key (kbd "C-x M-f")    'emms-play-file)
(global-set-key (kbd "C-x M-d")    'emms-play-directory)
(global-set-key (kbd "C-x M-t")    'emms-play-directory-tree)
; utilities
(global-set-key (kbd "s-s") 'emms-shuffle)
(global-set-key (kbd "C-x M-l")    'emms-get-lyrics-current-song)
(global-set-key (kbd "C-x M-g")    'emms-google-for-lyrics)
(global-set-key (kbd "C-x M-b")    'emms-smart-browse)
(global-set-key (kbd "C-x M-p")    'emms-playlist-mode-go)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Autocomplete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'auto-complete)
(require 'auto-complete-css)
(require 'auto-complete-python)
(require 'auto-complete-yasnippet)
(global-auto-complete-mode t)
(define-key ac-complete-mode-map "\t" 'ac-complete)
(define-key ac-complete-mode-map "\r" nil)
(add-hook 'python-mode-hook
          (lambda ()
            (setq ac-sources '(ac-source-ropemacs ac-source-yasnippet))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Pijaditas
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; display time at status bar
(setq-default display-time-24hr-format t)
(display-time)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; user preferences
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; load user preferences at the end to redefine defaults
(load-library "user-preferences")
